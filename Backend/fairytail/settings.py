"""
Django settings for fairytail project.
 
Generated by 'django-admin startproject' using Django 4.2.7.
 
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/
 
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
 
from pathlib import Path
import os
 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
 
 
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
 
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-8d!o^fsemj71%fwts(2!i=2#nu@&tim7nf^=0p%z&3cx+_#go4"
 
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
 
ALLOWED_HOSTS = ['*']
 
 
# Application definition
 
INSTALLED_APPS = [
    'corsheaders',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    "api",
    "product",
     # <- 추가
]
 
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',     # <- 추가
    'django.middleware.common.CommonMiddleware', # <- 추가
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
 
CORS_ORIGIN_WHITELIST = ['http://127.0.0.1:3000','http://localhost:3000','http://43.201.253.186:80', 'http://34.64.144.188:3000', 'http://43.201.85.72'] # 이 안에 해당하는건 허용, 배포 시에는 바꿔줘야함. 도메인 같은 게 들어가는것
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
ROOT_URLCONF = "fairytail.urls"
 
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
 
WSGI_APPLICATION = "fairytail.wsgi.application"
 
 
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
 
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
 
 
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
 
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
 
 
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
 
LANGUAGE_CODE = "ko-kr"
 
TIME_ZONE = "Asia/Seoul"
 
USE_I18N = True
 
USE_L10N = True
 
USE_TZ = False
 
 
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
 
STATIC_URL = "static/"
 
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
SERVER_URL = 'http://34.64.255.242:8000/'
 
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
 
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
 
 
CORS_ALLOW_CREDENTIALS = True
 
AUTH_USER_MODEL = 'product.User'
 
from datetime import timedelta
 
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination'
}
 
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=15),
    # access_token 유효시간
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # refresh_token 유효시간
    'ROTATE_REFRESH_TOKENS': True,    
    # True이면 refresh api에 토큰을 이력하면 refresh_token과
    # access_token이 함께 재발급 된다
    'BLACKLIST_AFTER_ROTATION': True,
    # True이면 기존에 사용하던 refresh토큰은 사용 할 수 없도록, blacklist에 저장 
    'UPDATE_LAST_LOGIN': True,
    # 'ALGORITHM': ALGORITHM,
    # 'SIGNING_KEY': SECRET_KEY,
	# Token 만들 때, Algorithm과 Secret_key가 필요하기에 넣어 준다.
    #'AUTH_HEADER_TYPES': ('Bearer',),
    # 보통의 경우에 Bearer Token을 사용하기에 Token 앞에 수식어?로 들어올 단어 set
}